#include <string>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <limits>
#include <cctype> // for input validation

using namespace std;

// Custom exception class for inventory errors
class InventoryException : public exception {
private:
    string message;
public:
    InventoryException(const string& msg) : message(msg) {}
    const char* what() const throw() {
        return message.c_str();
    }
};

// Component structure
struct Component {
    string name;
    int quantity;
    string status;
};

// Unit class to manage components
class Unit {
private:
    static const int MAX_COMPONENTS = 7;
    Component components[MAX_COMPONENTS];
    int numComponents;

public:
    // Constructor
    Unit() {
        try {
            numComponents = 5;  // Start with 5 default components
            
            // Initialize default components with numbers
            components[0] = {"Mouse-1", 1, randomStatus()};
            components[1] = {"Keyboard-2", 1, randomStatus()};
            components[2] = {"AVR-3", 1, randomStatus()};
            components[3] = {"HDMI-4", 1, randomStatus()};
            components[4] = {"System Unit-5", 1, randomStatus()};
        } catch (const exception& e) {
            cerr << "Error initializing unit: " << e.what() << endl;
            numComponents = 0;
        }
    }
    
    // Generate random status
    string randomStatus() {
        try {
            return (rand() % 5 == 0) ? "Bad!" : "Good";
        } catch (...) {
            return "Unknown"; // Default if random generation fails
        }
    }
    
    // Display components of this unit
    void displayComponents(int unitNo) {
        try {
            cout << "\n---------------- UNIT " << unitNo << " ----------------\n";
            cout << "COMPUTER LAB 01\n";
            cout << "----------------------------------------\n";
            cout << left << setw(20) << "COMPONENT NAME" << setw(15) << "QUANTITY" << "STATUS\n";
            cout << "----------------------------------------\n";
            
            if (numComponents == 0) {
                cout << "No components found for this unit.\n";
            } else {
                for (int i = 0; i < numComponents; i++) {
                    cout << left << setw(20) << components[i].name 
                         << setw(15) << components[i].quantity 
                         << components[i].status << endl;
                }
            }
            cout << "----------------------------------------\n";
        } catch (const exception& e) {
            cerr << "Error displaying components: " << e.what() << endl;
        }
    }
    
    // Add a new component
    bool addComponent() {
        try {
            if (numComponents >= MAX_COMPONENTS) {
                throw InventoryException("Cannot add more components. Maximum limit of " + 
                                       to_string(MAX_COMPONENTS) + " reached.");
            }
            
            string name;
            int quantity;
            string status;
            
            clearScreen();
            cout << "\n----- ADD NEW COMPONENT -----\n";
            
            // Get component name with validation
            cout << "Enter component name: ";
            if (!getValidName(name)) {
                throw InventoryException("Invalid component name. Operation cancelled.");
            }
            
            // Add number to component name
            name = name + "-" + to_string(numComponents + 1);
            
            // Get quantity with validation
            cout << "Enter quantity: ";
            if (!getValidQuantity(quantity)) {
                throw InventoryException("Invalid quantity. Operation cancelled.");
            }
            
            // Get status with validation
            cout << "Enter status (Good or Bad!): ";
            if (!getValidStatus(status)) {
                throw InventoryException("Invalid status. Operation cancelled.");
            }
            
            components[numComponents] = {name, quantity, status};
            numComponents++;
            
            cout << "\nComponent added successfully!\n";
            return true;
        } catch (const InventoryException& e) {
            cerr << "\nError: " << e.what() << endl;
            return false;
        } catch (const exception& e) {
            cerr << "\nUnexpected error adding component: " << e.what() << endl;
            return false;
        } catch (...) {
            cerr << "\nUnknown error occurred while adding component." << endl;
            return false;
        }
    }
    
    // Edit an existing component
    bool editComponent(int index) {
        try {
            if (index < 0 || index >= numComponents) {
                throw InventoryException("Invalid component index " + to_string(index+1) + 
                                       ". Valid range is 1-" + to_string(numComponents) + ".");
            }
            
            string name, status;
            int quantity;
            
            // Extract the component number
            string componentNumber;
            size_t pos = components[index].name.find("-");
            if (pos != string::npos) {
                componentNumber = components[index].name.substr(pos);
            } else {
                componentNumber = "-" + to_string(index + 1);
            }
            
            clearScreen();
            cout << "\n----- EDIT COMPONENT -----\n";
            cout << "Current component: " << components[index].name << endl;
            cout << "Current quantity: " << components[index].quantity << endl;
            cout << "Current status: " << components[index].status << endl;
            cout << "----------------------------\n";
            
            // Get new name or keep current
            cout << "Enter new name (or press Enter to keep current): ";
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            getline(cin, name);
            
            if (!name.empty()) {
                // Validate new name
                if (!isValidName(name)) {
                    throw InventoryException("Invalid component name format.");
                }
                // Preserve the component number
                components[index].name = name + componentNumber;
            }
            
            // Get new quantity or keep current
            cout << "Enter new quantity (or 0 to keep current): ";
            if (!getValidInteger(quantity)) {
                throw InventoryException("Invalid quantity format.");
            }
            
            if (quantity < 0) {
                throw InventoryException("Quantity cannot be negative.");
            } else if (quantity > 0) {
                components[index].quantity = quantity;
            }
            
            // Get new status or keep current
            cout << "Enter new status (Good or Bad! or press Enter to keep current): ";
            getline(cin, status);
            
            if (!status.empty()) {
                if (status != "Good" && status != "Bad!") {
                    throw InventoryException("Status must be either 'Good' or 'Bad!'");
                }
                components[index].status = status;
            }
            
            cout << "\nComponent updated successfully!\n";
            return true;
        } catch (const InventoryException& e) {
            cerr << "\nError: " << e.what() << endl;
            return false;
        } catch (const exception& e) {
            cerr << "\nUnexpected error editing component: " << e.what() << endl;
            return false;
        } catch (...) {
            cerr << "\nUnknown error occurred while editing component." << endl;
            return false;
        }
    }
    
    // Delete a component
    bool deleteComponent(int index) {
        try {
            if (numComponents <= 0) {
                throw InventoryException("No components available to delete.");
            }
            
            if (index < 0 || index >= numComponents) {
                throw InventoryException("Invalid component index " + to_string(index+1) + 
                                       ". Valid range is 1-" + to_string(numComponents) + ".");
            }
            
            // Confirm deletion
            char confirm;
            cout << "Are you sure you want to delete '" << components[index].name << "'? (y/n): ";
            cin >> confirm;
            
            if (tolower(confirm) != 'y') {
                cout << "Deletion cancelled." << endl;
                return false;
            }
            
            // Shift components to fill the gap
            for (int i = index; i < numComponents - 1; i++) {
                components[i] = components[i + 1];
                
                // Update the component number in the name
                size_t pos = components[i].name.find("-");
                if (pos != string::npos) {
                    string baseName = components[i].name.substr(0, pos);
                    components[i].name = baseName + "-" + to_string(i + 1);
                }
            }
            
            numComponents--;
            cout << "\nComponent deleted successfully!\n";
            return true;
        } catch (const InventoryException& e) {
            cerr << "\nError: " << e.what() << endl;
            return false;
        } catch (const exception& e) {
            cerr << "\nUnexpected error deleting component: " << e.what() << endl;
            return false;
        } catch (...) {
            cerr << "\nUnknown error occurred while deleting component." << endl;
            return false;
        }
    }
    
    // Get the status of the first component (for display all units)
    string getMainStatus() const {
        try {
            if (numComponents > 0) {
                return components[0].status;
            }
            return "Unknown";
        } catch (...) {
            return "Error";
        }
    }
    
private:
    // Helper function to clear screen (platform-independent)
    void clearScreen() {
        try {
            #ifdef _WIN32
                system("cls");
            #else
                system("clear");
            #endif
        } catch (...) {
            // If screen clearing fails, just print newlines
            for (int i = 0; i < 50; i++) cout << endl;
        }
    }
    
    // Input validation methods
    bool isValidName(const string& name) {
        // Name shouldn't be empty and should contain only allowed characters
        if (name.empty()) return false;
        
        // Check for disallowed characters (special characters except dash and underscore)
        for (char c : name) {
            if (!isalnum(c) && c != '-' && c != '_' && c != ' ') {
                return false;
            }
        }
        return true;
    }
    
    bool getValidName(string& name) {
        try {
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            getline(cin, name);
            
            if (!isValidName(name)) {
                cout << "Invalid name. Please use only letters, numbers, spaces, dashes and underscores: ";
                return getValidName(name);
            }
            return true;
        } catch (...) {
            return false;
        }
    }
    
    bool getValidQuantity(int& quantity) {
        try {
            if (!(cin >> quantity) || quantity <= 0) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Invalid input. Enter a positive number: ";
                return getValidQuantity(quantity);
            }
            return true;
        } catch (...) {
            return false;
        }
    }
    
    bool getValidStatus(string& status) {
        try {
            cin >> status;
            
            if (status != "Good" && status != "Bad!") {
                cout << "Invalid status. Enter 'Good' or 'Bad!': ";
                return getValidStatus(status);
            }
            return true;
        } catch (...) {
            return false;
        }
    }
    
    bool getValidInteger(int& value) {
        string input;
        getline(cin, input);
        
        try {
            if (input.empty()) {
                value = 0;  // Empty input means keep current
                return true;
            }
            
            for (char c : input) {
                if (!isdigit(c)) {
                    return false;
                }
            }
            
            value = stoi(input);
            return true;
        } catch (...) {
            return false;
        }
    }
};

// Helper function to clear screen
void clearScreen() {
    try {
        #ifdef _WIN32
            system("cls");
        #else
            system("clear");
        #endif
    } catch (...) {
        // If screen clearing fails, just print newlines
        for (int i = 0; i < 50; i++) cout << endl;
    }
}

// Function to get valid integer input
bool getValidInteger(int& value, int min, int max) {
    try {
        string input;
        getline(cin, input);
        
        // Check if input contains only digits
        for (char c : input) {
            if (!isdigit(c)) {
                cout << "Invalid input. Please enter a number between " << min << " and " << max << ": ";
                return getValidInteger(value, min, max);
            }
        }
        
        // Convert to integer and check range
        value = stoi(input);
        if (value < min || value > max) {
            cout << "Number must be between " << min << " and " << max << ": ";
            return getValidInteger(value, min, max);
        }
        
        return true;
    } catch (const exception& e) {
        cout << "Error processing input: " << e.what() << endl;
        cout << "Please try again: ";
        return getValidInteger(value, min, max);
    }
}

// Function to display the main menu
void displayMainMenu() {
    try {
        cout << "\n======== COMPUTER LAB INVENTORY SYSTEM ========\n";
        cout << "1. Search Unit\n";
        cout << "2. Display All Units\n";
        cout << "3. Exit\n";
        cout << "=============================================\n";
        cout << "Enter your choice (1-3): ";
    } catch (...) {
        cout << "\nError displaying menu. Please restart the application.\n";
    }
}

// Function to display the unit menu
void displayUnitMenu() {
    try {
        cout << "\n---- UNIT OPTIONS ----\n";
        cout << "1. Add Component\n";
        cout << "2. Edit Component\n";
        cout << "3. Delete Component\n";
        cout << "4. Back to Main Menu\n";
        cout << "---------------------\n";
        cout << "Enter your choice (1-4): ";
    } catch (...) {
        cout << "\nError displaying menu. Please restart the application.\n";
    }
}

// Function to display the component grid for 34 computers
void displayComponentGrid() {
    try {
        cout << "\n======== COMPUTER LABORATORY 01 UNIT LAYOUT (34 UNITS) ========\n";
        cout << "+-------+-------+-------+-------+-------+-------+-------+\n";
        cout << "|  C01  |  C02  |  C03  |  C04  |  C05  |  C06  |  C07  |\n";
        cout << "+-------+-------+-------+-------+-------+-------+-------+\n";
        cout << "|  C08  |  C09  |  C10  |  C11  |  C12  |  C13  |  C14  |\n";
        cout << "+-------+-------+-------+-------+-------+-------+-------+\n";
        cout << "|  C15  |  C16  |  C17  |  C18  |  C19  |  C20  |  C21  |\n";
        cout << "+-------+-------+-------+-------+-------+-------+-------+\n";
        cout << "|  C22  |  C23  |  C24  |  C25  |  C26  |  C27  |  C28  |\n";
        cout << "+-------+-------+-------+-------+-------+-------+-------+\n";
        cout << "|  C29  |  C30  |  C31  |  C32  |  C33  |  C34  |       |\n";
        cout << "+-------+-------+-------+-------+-------+-------+-------+\n";
    } catch (...) {
        cout << "\nError displaying grid layout. Please restart the application.\n";
    }
}

// Function to wait for user input
void waitForInput() {
    try {
        cout << "\nPress Enter to continue...";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    } catch (...) {
        // If there's an error, just continue after a delay
        cout << "\nContinuing in 3 seconds...";
        #ifdef _WIN32
            Sleep(2000);
        #else
            sleep(3);
        #endif
    }
}

// Main function
int main() {
    try {
        // Seed random number generator
        srand(static_cast<unsigned>(time(0)));
        
        // Create array of units
        const int NUM_UNITS = 34;
        Unit* units = nullptr;
        
        // Try to allocate memory for units
        try {
            units = new Unit[NUM_UNITS];
        } catch (const bad_alloc& e) {
            cerr << "Fatal error: Unable to allocate memory for the inventory system." << endl;
            cerr << "Error details: " << e.what() << endl;
            return 1;
        }
        
        int choice = 0, unitChoice = 0, componentChoice = 0;
        bool exitProgram = false;
        
        while (!exitProgram) {
            try {
                clearScreen();
                displayComponentGrid();
                displayMainMenu();
                
                // Get user's main menu choice
                cin >> choice;
                
                if (cin.fail()) {
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "\nInvalid input. Please enter a number between 1 and 3.\n";
                    waitForInput();
                    continue;
                }
                
                switch (choice) {
                    case 1: // Search for a specific unit
                        try {
                            clearScreen();
                            cout << "\n----- SEARCH UNIT -----\n";
                            cout << "Enter unit number (1-34): ";
                            cin >> unitChoice;
                            
                            if (cin.fail() || unitChoice < 1 || unitChoice > NUM_UNITS) {
                                cin.clear();
                                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                                cout << "\nInvalid unit number. Please enter a number between 1 and 34.\n";
                                waitForInput();
                                continue;
                            }
                            
                            bool backToMainMenu = false;
                            while (!backToMainMenu) {
                                try {
                                    clearScreen();
                                    units[unitChoice - 1].displayComponents(unitChoice);
                                    
                                    displayUnitMenu();
                                    cin >> choice;
                                    
                                    if (cin.fail()) {
                                        cin.clear();
                                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                                        cout << "\nInvalid input. Please enter a number between 1 and 4.\n";
                                        waitForInput();
                                        continue;
                                    }
                                    
                                    switch (choice) {
                                        case 1: // Add component
                                            units[unitChoice - 1].addComponent();
                                            waitForInput();
                                            break;
                                        
                                        case 2: // Edit component
                                            cout << "\nEnter component number to edit (1-7): ";
                                            cin >> componentChoice;
                                            
                                            if (cin.fail() || componentChoice < 1 || componentChoice > 7) {
                                                cin.clear();
                                                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                                                cout << "\nInvalid component number. Please enter a number between 1 and 7.\n";
                                            } else {
                                                units[unitChoice - 1].editComponent(componentChoice - 1);
                                            }
                                            waitForInput();
                                            break;
                                        
                                        case 3: // Delete component
                                            cout << "\nEnter component number to delete (1-7): ";
                                            cin >> componentChoice;
                                            
                                            if (cin.fail() || componentChoice < 1 || componentChoice > 7) {
                                                cin.clear();
                                                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                                                cout << "\nInvalid component number. Please enter a number between 1 and 7.\n";
                                            } else {
                                                units[unitChoice - 1].deleteComponent(componentChoice - 1);
                                            }
                                            waitForInput();
                                            break;
                                        
                                        case 4: // Back to main menu
                                            backToMainMenu = true;
                                            break;
                                        
                                        default:
                                            cout << "\nInvalid choice. Please enter a number between 1 and 4.\n";
                                            waitForInput();
                                            break;
                                    }
                                } catch (const exception& e) {
                                    cerr << "\nError in unit operations: " << e.what() << endl;
                                    waitForInput();
                                }
                            }
                        } catch (const exception& e) {
                            cerr << "\nError in search operation: " << e.what() << endl;
                            waitForInput();
                        }
                        break;
                    
                    case 2: // Display all units
                        try {
                            clearScreen();
                            cout << "\n----- ALL UNITS STATUS -----\n";
                            cout << "----------------------------\n";
                            cout << left << setw(15) << "UNIT NUMBER" << "STATUS\n";
                            cout << "----------------------------\n";
                            
                            for (int i = 0; i < NUM_UNITS; i++) {
                                try {
                                    cout << left << setw(15) << "C" + to_string(i + 1) << units[i].getMainStatus() << endl;
                                } catch (const exception& e) {
                                    cout << left << setw(15) << "C" + to_string(i + 1) << "Error: " << e.what() << endl;
                                }
                            }
                            waitForInput();
                        } catch (const exception& e) {
                            cerr << "\nError displaying all units: " << e.what() << endl;
                            waitForInput();
                        }
                        break;
                    
                    case 3: // Exit the program
                        cout << "\nThank you for using the Computer Lab Inventory System. Goodbye!\n";
                        exitProgram = true;
                        break;
                    
                    default:
                        cout << "\nInvalid choice. Please enter a number between 1 and 3.\n";
                        waitForInput();
                        break;
                }
            } catch (const exception& e) {
                cerr << "\nAn error occurred in the main menu: " << e.what() << endl;
                cerr << "The program will attempt to continue." << endl;
                waitForInput();
            }
        }
        
        // Clean up memory
        if (units != nullptr) {
            delete[] units;
            units = nullptr;
        }
        
        return 0;
    } catch (const exception& e) {
        cerr << "\nFatal error: " << e.what() << endl;
        cerr << "The program will now exit." << endl;
        return 1;
    } catch (...) {
        cerr << "\nUnknown fatal error occurred. The program will now exit." << endl;
        return 1;
    }
}